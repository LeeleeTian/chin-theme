
$screen-lg2:                  1440px !default;
$screen-lg2-min:              $screen-lg2 !default;
$screen-lg2-desktop:          $screen-lg2-min !default;
$screen-lg-max:               ($screen-lg2-min - 1) !default;
$container-large2-desktop:    (1410px + $grid-gutter-width) !default;
$container-lg2:               $container-large2-desktop !default;

.container {
    // @include container-fixed; No need for, already done.
    @media (min-width: $screen-lg2-min) {
        width: $container-lg2;
    }
}

// xLarge grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg2-min) {
    @include make-grid(lg2);
}

// Generate the xlarge columns
@mixin make-lg2-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);

    @media (min-width: $screen-lg2-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}
@mixin make-lg2-column-offset($columns) {
    @media (min-width: $screen-lg2-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}
@mixin make-lg2-column-push($columns) {
    @media (min-width: $screen-lg2-min) {
        left: percentage(($columns / $grid-columns));
    }
}
@mixin make-lg2-column-pull($columns) {
    @media (min-width: $screen-lg2-min) {
        right: percentage(($columns / $grid-columns));
    }
}

@mixin make-grid-columns($i: 1, $list: ".col-lg2-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-lg2-#{$i}";
    }
    #{$list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left:  ($grid-gutter-width / 2);
        padding-right: ($grid-gutter-width / 2);
    }
}

@include make-grid-columns;

@include responsive-invisibility('.visible-lg2');

.visible-lg2-block,
.visible-lg2-inline,
.visible-lg2-inline-block {
    display: none !important;
}

@media (min-width: $screen-lg2-min) {
    @include responsive-invisibility('.visible-lg');
    @include responsive-visibility('.visible-lg2');
}
.visible-lg2-block {
    @media (min-width: $screen-lg2-min) {
        display: block !important;
    }
}
.visible-lg2-inline {
    @media (min-width: $screen-lg2-min) {
        display: inline !important;
    }
}
.visible-lg2-inline-block {
    @media (min-width: $screen-lg2-min) {
        display: inline-block !important;
    }
}

@media (min-width: $screen-lg-min) and (max-width: $screen-lg-max) {
    @include responsive-invisibility('.hidden-lg');
}

@media (min-width: $screen-lg2-min) {
    @include responsive-invisibility('.hidden-lg2');
    @include responsive-visibility('.hidden-lg');

    .visible-lg-block,
    .visible-lg-inline,
    .visible-lg-inline-block {
        display: none !important;
    }
}